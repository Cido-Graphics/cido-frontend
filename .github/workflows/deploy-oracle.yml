name: Deploy to Oracle Cloud

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to Oracle Cloud via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USER }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/cido-project/cido-frontend
            git pull origin main
            npm install
            
            # PM2가 없으면 설치
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # 항상 빌드 (안정성 우선)
            echo "Building production bundle..."
            npm run build
            
            # Certbot 설치 (SSL 인증서용)
            if ! command -v certbot &> /dev/null; then
              echo "Installing Certbot..."
              sudo apt-get update -qq
              sudo apt-get install -y certbot python3-certbot-nginx
            fi
            
            # Nginx 설정 생성 (80 포트를 3000 포트로 프록시, HTTPS 설정 제거)
            sudo tee /etc/nginx/sites-available/cidofactory.com > /dev/null <<'EOF'
            server {
                listen 80;
                server_name cidofactory.com www.cidofactory.com;

                # HTTPS 리다이렉트 기존 설정 제거
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # 기존 모든 Nginx 설정 파일 제거
            echo "Cleaning up old Nginx configurations..."
            sudo rm -f /etc/nginx/sites-enabled/*
            sudo rm -f /etc/nginx/sites-available/default
            sudo rm -f /etc/nginx/conf.d/cidofactory.com.conf
            
            # 새 설정 활성화
            sudo ln -sf /etc/nginx/sites-available/cidofactory.com /etc/nginx/sites-enabled/cidofactory.com
            
            # Nginx 설정 검증 및 재시작
            echo "Testing Nginx configuration..."
            sudo nginx -t
            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            
            # SSL 인증서 자동 발급 및 설정 (Let's Encrypt)
            echo "Setting up SSL certificate..."
            if ! sudo certbot certificates 2>/dev/null | grep -q "cidofactory.com"; then
              echo "Installing SSL certificate for cidofactory.com..."
              sudo certbot --nginx -d cidofactory.com -d www.cidofactory.com \
                --non-interactive \
                --agree-tos \
                --email hsm@cidofactory.com \
                --redirect
              echo "SSL certificate installed successfully!"
            else
              echo "SSL certificate already exists, renewing if needed..."
              sudo certbot renew --quiet
            fi
            
            # 방화벽 규칙 확인 및 추가
            echo "Configuring firewall..."
            sudo iptables -C INPUT -p tcp --dport 80 -j ACCEPT 2>/dev/null || sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT
            sudo iptables -C INPUT -p tcp --dport 443 -j ACCEPT 2>/dev/null || sudo iptables -I INPUT -p tcp --dport 443 -j ACCEPT
            sudo iptables -C INPUT -p tcp --dport 3000 -j ACCEPT 2>/dev/null || sudo iptables -I INPUT -p tcp --dport 3000 -j ACCEPT
            
            # iptables 규칙 저장
            if command -v netfilter-persistent &> /dev/null; then
              sudo netfilter-persistent save
            elif command -v iptables-save &> /dev/null; then
              sudo iptables-save | sudo tee /etc/iptables/rules.v4 > /dev/null
            fi
            
            # PM2 프로세스만 정리
            echo "Stopping PM2 processes..."
            pm2 stop all 2>/dev/null || true
            pm2 delete all 2>/dev/null || true
            
            # 포트 점유 프로세스만 정리
            echo "Freeing ports 3000 and 8080..."
            sudo lsof -ti:3000 | xargs -r sudo kill -9 2>/dev/null || true
            sudo lsof -ti:8080 | xargs -r sudo kill -9 2>/dev/null || true
            sleep 2
            
            echo "Verifying ports are free..."
            if sudo ss -tlnp | grep -q :3000; then
              echo "WARNING: Port 3000 still in use, forcing cleanup..."
              sudo fuser -k 3000/tcp 2>/dev/null || true
              sleep 1
            fi
            
            # PM2로 새로 시작
            echo "Starting Next.js with PM2..."
            pm2 start npm --name "cido-frontend" -- start
            pm2 save
            sleep 2
            pm2 logs cido-frontend --lines 10 --nostream
            
            echo "Deployment completed successfully!"
            echo "=== PM2 Status ==="
            pm2 status
            echo "=== Port Status ==="
            sudo ss -tlnp | grep :3000 || echo "Nothing listening on port 3000"
            sudo ss -tlnp | grep :80 || echo "Nothing listening on port 80"
            echo "=== Working Directory ==="
            pwd
            ls -la
            echo "=== .next Directory ==="
            ls -la .next 2>/dev/null || echo ".next directory not found!"
            echo "=== PM2 Logs (last 50 lines) ==="
            pm2 logs cido-frontend --lines 50 --nostream || echo "No logs available"
            echo "=== Testing localhost:3000 ==="
            curl -I http://localhost:3000 2>&1 | head -10
            echo "=== Testing localhost:80 (Nginx) ==="
            curl -I http://localhost:80 2>&1 | head -10
            echo "=== Nginx Configuration ==="
            cat /etc/nginx/sites-enabled/cidofactory.com
            echo "=== Nginx Error Log (last 20 lines) ==="
            sudo tail -20 /var/log/nginx/error.log 2>/dev/null || echo "No errors"
            echo "=== Nginx Access Log (last 10 lines) ==="
            sudo tail -10 /var/log/nginx/access.log 2>/dev/null || echo "No access logs"

